import { type InterfaceAbi } from '@vechain/vechain-sdk-core';
import { TEST_ACCOUNTS } from '../../fixture';

const contractBytecode: string =
    '0x608060405234801561001057600080fd5b506040516102063803806102068339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610150806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360fe47b11461003b5780636d4ce63c14610057575b600080fd5b610055600480360381019061005091906100c3565b610075565b005b61005f61007f565b60405161006c91906100ff565b60405180910390f35b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b6100a08161008d565b81146100ab57600080fd5b50565b6000813590506100bd81610097565b92915050565b6000602082840312156100d9576100d8610088565b5b60006100e7848285016100ae565b91505092915050565b6100f98161008d565b82525050565b600060208201905061011460008301846100f0565b9291505056fea2646970667358221220785262acbf50fa50a7b4dc8d8087ca8904c7e6b847a13674503fdcbac903b67e64736f6c63430008170033';

const deployedContractBytecode: string =
    '0x608060405234801561001057600080fd5b50600436106100365760003560e01c806360fe47b11461003b5780636d4ce63c14610057575b600080fd5b610055600480360381019061005091906100c3565b610075565b005b61005f61007f565b60405161006c91906100ff565b60405180910390f35b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b6100a08161008d565b81146100ab57600080fd5b50565b6000813590506100bd81610097565b92915050565b6000602082840312156100d9576100d8610088565b5b60006100e7848285016100ae565b91505092915050565b6100f98161008d565b82525050565b600060208201905061011460008301846100f0565b9291505056fea2646970667358221220785262acbf50fa50a7b4dc8d8087ca8904c7e6b847a13674503fdcbac903b67e64736f6c63430008170033';

const erc20ContractBytecode: string =
    '0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f53616d706c65546f6b656e0000000000000000000000000000000000000000008152506040518060400160405280600281526020017f535400000000000000000000000000000000000000000000000000000000000081525081600390816200008f91906200062c565b508060049081620000a191906200062c565b505050620000e633620000b9620000ec60201b60201c565b60ff16600a620000ca919062000896565b620f4240620000da9190620008e7565b620000f560201b60201c565b62000a3a565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200016a5760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040162000161919062000977565b60405180910390fd5b6200017e600083836200018260201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620001d8578060026000828254620001cb919062000994565b92505081905550620002ae565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000267578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016200025e93929190620009e0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002f9578060026000828254039250508190555062000346565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003a5919062000a1d565b60405180910390a3505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200043457607f821691505b6020821081036200044a5762000449620003ec565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000475565b620004c0868362000475565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200050d620005076200050184620004d8565b620004e2565b620004d8565b9050919050565b6000819050919050565b6200052983620004ec565b62000541620005388262000514565b84845462000482565b825550505050565b600090565b6200055862000549565b620005658184846200051e565b505050565b5b818110156200058d57620005816000826200054e565b6001810190506200056b565b5050565b601f821115620005dc57620005a68162000450565b620005b18462000465565b81016020851015620005c1578190505b620005d9620005d08562000465565b8301826200056a565b50505b505050565b600082821c905092915050565b60006200060160001984600802620005e1565b1980831691505092915050565b60006200061c8383620005ee565b9150826002028217905092915050565b6200063782620003b2565b67ffffffffffffffff811115620006535762000652620003bd565b5b6200065f82546200041b565b6200066c82828562000591565b600060209050601f831160018114620006a457600084156200068f578287015190505b6200069b85826200060e565b8655506200070b565b601f198416620006b48662000450565b60005b82811015620006de57848901518255600182019150602085019450602081019050620006b7565b86831015620006fe5784890151620006fa601f891682620005ee565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620007a15780860481111562000779576200077862000713565b5b6001851615620007895780820291505b8081029050620007998562000742565b945062000759565b94509492505050565b600082620007bc57600190506200088f565b81620007cc57600090506200088f565b8160018114620007e55760028114620007f05762000826565b60019150506200088f565b60ff84111562000805576200080462000713565b5b8360020a9150848211156200081f576200081e62000713565b5b506200088f565b5060208310610133831016604e8410600b8410161715620008605782820a9050838111156200085a576200085962000713565b5b6200088f565b6200086f84848460016200074f565b9250905081840481111562000889576200088862000713565b5b81810290505b9392505050565b6000620008a382620004d8565b9150620008b083620004d8565b9250620008df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620007aa565b905092915050565b6000620008f482620004d8565b91506200090183620004d8565b92508282026200091181620004d8565b915082820484148315176200092b576200092a62000713565b5b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200095f8262000932565b9050919050565b620009718162000952565b82525050565b60006020820190506200098e600083018462000966565b92915050565b6000620009a182620004d8565b9150620009ae83620004d8565b9250828201905080821115620009c957620009c862000713565b5b92915050565b620009da81620004d8565b82525050565b6000606082019050620009f7600083018662000966565b62000a066020830185620009cf565b62000a156040830184620009cf565b949350505050565b600060208201905062000a346000830184620009cf565b92915050565b610e558062000a4a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610aa9565b60405180910390f35b6100d060048036038101906100cb9190610b64565b610292565b6040516100dd9190610bbf565b60405180910390f35b6100ee6102b5565b6040516100fb9190610be9565b60405180910390f35b61011e60048036038101906101199190610c04565b6102bf565b60405161012b9190610bbf565b60405180910390f35b61013c6102ee565b6040516101499190610c73565b60405180910390f35b61016c60048036038101906101679190610c8e565b6102f7565b6040516101799190610be9565b60405180910390f35b61018a61033f565b6040516101979190610aa9565b60405180910390f35b6101ba60048036038101906101b59190610b64565b6103d1565b6040516101c79190610bbf565b60405180910390f35b6101ea60048036038101906101e59190610cbb565b6103f4565b6040516101f79190610be9565b60405180910390f35b60606003805461020f90610d2a565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610d2a565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60008061029d61047b565b90506102aa818585610483565b600191505092915050565b6000600254905090565b6000806102ca61047b565b90506102d7858285610495565b6102e2858585610529565b60019150509392505050565b60006012905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461034e90610d2a565b80601f016020809104026020016040519081016040528092919081815260200182805461037a90610d2a565b80156103c75780601f1061039c576101008083540402835291602001916103c7565b820191906000526020600020905b8154815290600101906020018083116103aa57829003601f168201915b5050505050905090565b6000806103dc61047b565b90506103e9818585610529565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b610490838383600161061d565b505050565b60006104a184846103f4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105235781811015610513578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161050a93929190610d6a565b60405180910390fd5b6105228484848403600061061d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361059b5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105929190610da1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361060d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106049190610da1565b60405180910390fd5b6106188383836107f4565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361068f5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016106869190610da1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107015760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106f89190610da1565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156107ee578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107e59190610be9565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084657806002600082825461083a9190610deb565b92505081905550610919565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156108d2578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108c993929190610d6a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361096257806002600082825403925050819055506109af565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a0c9190610be9565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a53578082015181840152602081019050610a38565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a7b82610a19565b610a858185610a24565b9350610a95818560208601610a35565b610a9e81610a5f565b840191505092915050565b60006020820190508181036000830152610ac38184610a70565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610afb82610ad0565b9050919050565b610b0b81610af0565b8114610b1657600080fd5b50565b600081359050610b2881610b02565b92915050565b6000819050919050565b610b4181610b2e565b8114610b4c57600080fd5b50565b600081359050610b5e81610b38565b92915050565b60008060408385031215610b7b57610b7a610acb565b5b6000610b8985828601610b19565b9250506020610b9a85828601610b4f565b9150509250929050565b60008115159050919050565b610bb981610ba4565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b610be381610b2e565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b600080600060608486031215610c1d57610c1c610acb565b5b6000610c2b86828701610b19565b9350506020610c3c86828701610b19565b9250506040610c4d86828701610b4f565b9150509250925092565b600060ff82169050919050565b610c6d81610c57565b82525050565b6000602082019050610c886000830184610c64565b92915050565b600060208284031215610ca457610ca3610acb565b5b6000610cb284828501610b19565b91505092915050565b60008060408385031215610cd257610cd1610acb565b5b6000610ce085828601610b19565b9250506020610cf185828601610b19565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d4257607f821691505b602082108103610d5557610d54610cfb565b5b50919050565b610d6481610af0565b82525050565b6000606082019050610d7f6000830186610d5b565b610d8c6020830185610bda565b610d996040830184610bda565b949350505050565b6000602082019050610db66000830184610d5b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df682610b2e565b9150610e0183610b2e565b9250828201905080821115610e1957610e18610dbc565b5b9291505056fea2646970667358221220912f5265edaea44910db734f0d00fccd257c78dba79c126931551eaad1a334f764736f6c63430008170033';

const erc721ContractBytecode: string =
    '0x60806040523480156200001157600080fd5b506040518060400160405280600981526020017f53616d706c654e465400000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f534e46540000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b611c7c806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114c6565b6102bc565b6040516100fb919061150e565b60405180910390f35b61010c61039e565b60405161011991906115b9565b60405180910390f35b61013c60048036038101906101379190611611565b610430565b604051610149919061167f565b60405180910390f35b61016c600480360381019061016791906116c6565b61044c565b005b61018860048036038101906101839190611706565b610462565b005b6101a4600480360381019061019f9190611706565b610564565b005b6101c060048036038101906101bb9190611611565b610584565b6040516101cd919061167f565b60405180910390f35b6101f060048036038101906101eb9190611759565b610596565b6040516101fd9190611795565b60405180910390f35b61020e610650565b60405161021b91906115b9565b60405180910390f35b61023e600480360381019061023991906117dc565b6106e2565b005b61025a60048036038101906102559190611951565b6106f8565b005b61027660048036038101906102719190611611565b610715565b60405161028391906115b9565b60405180910390f35b6102a660048036038101906102a191906119d4565b61077e565b6040516102b3919061150e565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610812565b5b9050919050565b6060600080546103ad90611a43565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a43565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b8261087c565b5061044582610904565b9050919050565b61045e8282610459610941565b610949565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104d45760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016104cb919061167f565b60405180910390fd5b60006104e883836104e3610941565b61095b565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461055e578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161055593929190611a74565b60405180910390fd5b50505050565b61057f838383604051806020016040528060008152506106f8565b505050565b600061058f8261087c565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106095760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610600919061167f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461065f90611a43565b80601f016020809104026020016040519081016040528092919081815260200182805461068b90611a43565b80156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b5050505050905090565b6106f46106ed610941565b8383610b75565b5050565b610703848484610462565b61070f84848484610ce4565b50505050565b60606107208261087c565b50600061072b610e9b565b9050600081511161074b5760405180602001604052806000815250610776565b8061075584610eb2565b604051602001610766929190611ae7565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061088883610f80565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108fb57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016108f29190611795565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6109568383836001610fbd565b505050565b60008061096784610f80565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146109a9576109a8818486611182565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a3a576109eb600085600080610fbd565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610abd576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610be657816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610bdd919061167f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cd7919061150e565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115610e95578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610d28610941565b8685856040518563ffffffff1660e01b8152600401610d4a9493929190611b60565b6020604051808303816000875af1925050508015610d8657506040513d601f19601f82011682018060405250810190610d839190611bc1565b60015b610e0a573d8060008114610db6576040519150601f19603f3d011682016040523d82523d6000602084013e610dbb565b606091505b506000815103610e0257836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610df9919061167f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610e9357836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610e8a919061167f565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b606060006001610ec184611246565b01905060008167ffffffffffffffff811115610ee057610edf611826565b5b6040519080825280601f01601f191660200182016040528015610f125781602001600182028036833780820191505090505b509050600082602001820190505b600115610f75578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f6957610f68611bee565b5b04945060008503610f20575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080610ff65750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561112a5760006110068461087c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561107157508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156110845750611082818461077e565b155b156110c657826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016110bd919061167f565b60405180910390fd5b811561112857838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61118d838383611399565b61124157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361120257806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016111f99190611795565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611238929190611c1d565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112a4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161129a57611299611bee565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106112e1576d04ee2d6d415b85acef810000000083816112d7576112d6611bee565b5b0492506020810190505b662386f26fc10000831061131057662386f26fc10000838161130657611305611bee565b5b0492506010810190505b6305f5e1008310611339576305f5e100838161132f5761132e611bee565b5b0492506008810190505b612710831061135e57612710838161135457611353611bee565b5b0492506004810190505b60648310611381576064838161137757611376611bee565b5b0492506002810190505b600a8310611390576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561145157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114125750611411848461077e565b5b8061145057508273ffffffffffffffffffffffffffffffffffffffff1661143883610904565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114a38161146e565b81146114ae57600080fd5b50565b6000813590506114c08161149a565b92915050565b6000602082840312156114dc576114db611464565b5b60006114ea848285016114b1565b91505092915050565b60008115159050919050565b611508816114f3565b82525050565b600060208201905061152360008301846114ff565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611563578082015181840152602081019050611548565b60008484015250505050565b6000601f19601f8301169050919050565b600061158b82611529565b6115958185611534565b93506115a5818560208601611545565b6115ae8161156f565b840191505092915050565b600060208201905081810360008301526115d38184611580565b905092915050565b6000819050919050565b6115ee816115db565b81146115f957600080fd5b50565b60008135905061160b816115e5565b92915050565b60006020828403121561162757611626611464565b5b6000611635848285016115fc565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116698261163e565b9050919050565b6116798161165e565b82525050565b60006020820190506116946000830184611670565b92915050565b6116a38161165e565b81146116ae57600080fd5b50565b6000813590506116c08161169a565b92915050565b600080604083850312156116dd576116dc611464565b5b60006116eb858286016116b1565b92505060206116fc858286016115fc565b9150509250929050565b60008060006060848603121561171f5761171e611464565b5b600061172d868287016116b1565b935050602061173e868287016116b1565b925050604061174f868287016115fc565b9150509250925092565b60006020828403121561176f5761176e611464565b5b600061177d848285016116b1565b91505092915050565b61178f816115db565b82525050565b60006020820190506117aa6000830184611786565b92915050565b6117b9816114f3565b81146117c457600080fd5b50565b6000813590506117d6816117b0565b92915050565b600080604083850312156117f3576117f2611464565b5b6000611801858286016116b1565b9250506020611812858286016117c7565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61185e8261156f565b810181811067ffffffffffffffff8211171561187d5761187c611826565b5b80604052505050565b600061189061145a565b905061189c8282611855565b919050565b600067ffffffffffffffff8211156118bc576118bb611826565b5b6118c58261156f565b9050602081019050919050565b82818337600083830152505050565b60006118f46118ef846118a1565b611886565b9050828152602081018484840111156119105761190f611821565b5b61191b8482856118d2565b509392505050565b600082601f8301126119385761193761181c565b5b81356119488482602086016118e1565b91505092915050565b6000806000806080858703121561196b5761196a611464565b5b6000611979878288016116b1565b945050602061198a878288016116b1565b935050604061199b878288016115fc565b925050606085013567ffffffffffffffff8111156119bc576119bb611469565b5b6119c887828801611923565b91505092959194509250565b600080604083850312156119eb576119ea611464565b5b60006119f9858286016116b1565b9250506020611a0a858286016116b1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a5b57607f821691505b602082108103611a6e57611a6d611a14565b5b50919050565b6000606082019050611a896000830186611670565b611a966020830185611786565b611aa36040830184611670565b949350505050565b600081905092915050565b6000611ac182611529565b611acb8185611aab565b9350611adb818560208601611545565b80840191505092915050565b6000611af38285611ab6565b9150611aff8284611ab6565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000611b3282611b0b565b611b3c8185611b16565b9350611b4c818560208601611545565b611b558161156f565b840191505092915050565b6000608082019050611b756000830187611670565b611b826020830186611670565b611b8f6040830185611786565b8181036060830152611ba18184611b27565b905095945050505050565b600081519050611bbb8161149a565b92915050565b600060208284031215611bd757611bd6611464565b5b6000611be584828501611bac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050611c326000830185611670565b611c3f6020830184611786565b939250505056fea26469706673582212202682c0f0a07ef363f2e0e4d62145c609739ae0289219f93825ad7da317f3d72464736f6c63430008170033';

const deployedContractAbi: InterfaceAbi = [
    {
        inputs: [],
        name: 'get',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'uint256', name: 'x', type: 'uint256' }],
        name: 'set',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    }
];

const deployedERC20Abi = [
    { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },
    {
        inputs: [
            { internalType: 'address', name: 'spender', type: 'address' },
            { internalType: 'uint256', name: 'allowance', type: 'uint256' },
            { internalType: 'uint256', name: 'needed', type: 'uint256' }
        ],
        name: 'ERC20InsufficientAllowance',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'sender', type: 'address' },
            { internalType: 'uint256', name: 'balance', type: 'uint256' },
            { internalType: 'uint256', name: 'needed', type: 'uint256' }
        ],
        name: 'ERC20InsufficientBalance',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'approver', type: 'address' }
        ],
        name: 'ERC20InvalidApprover',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'receiver', type: 'address' }
        ],
        name: 'ERC20InvalidReceiver',
        type: 'error'
    },
    {
        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],
        name: 'ERC20InvalidSender',
        type: 'error'
    },
    {
        inputs: [{ internalType: 'address', name: 'spender', type: 'address' }],
        name: 'ERC20InvalidSpender',
        type: 'error'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'owner',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'spender',
                type: 'address'
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'value',
                type: 'uint256'
            }
        ],
        name: 'Approval',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'from',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'to',
                type: 'address'
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'value',
                type: 'uint256'
            }
        ],
        name: 'Transfer',
        type: 'event'
    },
    {
        inputs: [
            { internalType: 'address', name: 'owner', type: 'address' },
            { internalType: 'address', name: 'spender', type: 'address' }
        ],
        name: 'allowance',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'spender', type: 'address' },
            { internalType: 'uint256', name: 'value', type: 'uint256' }
        ],
        name: 'approve',
        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'decimals',
        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'name',
        outputs: [{ internalType: 'string', name: '', type: 'string' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'symbol',
        outputs: [{ internalType: 'string', name: '', type: 'string' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'totalSupply',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'value', type: 'uint256' }
        ],
        name: 'transfer',
        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'from', type: 'address' },
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'value', type: 'uint256' }
        ],
        name: 'transferFrom',
        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
        stateMutability: 'nonpayable',
        type: 'function'
    }
];

const deployedERC721ContractAbi = [
    { inputs: [], stateMutability: 'nonpayable', type: 'constructor' },
    {
        inputs: [
            { internalType: 'address', name: 'sender', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
            { internalType: 'address', name: 'owner', type: 'address' }
        ],
        name: 'ERC721IncorrectOwner',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'operator', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' }
        ],
        name: 'ERC721InsufficientApproval',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'approver', type: 'address' }
        ],
        name: 'ERC721InvalidApprover',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'operator', type: 'address' }
        ],
        name: 'ERC721InvalidOperator',
        type: 'error'
    },
    {
        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],
        name: 'ERC721InvalidOwner',
        type: 'error'
    },
    {
        inputs: [
            { internalType: 'address', name: 'receiver', type: 'address' }
        ],
        name: 'ERC721InvalidReceiver',
        type: 'error'
    },
    {
        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],
        name: 'ERC721InvalidSender',
        type: 'error'
    },
    {
        inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
        name: 'ERC721NonexistentToken',
        type: 'error'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'owner',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'approved',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'uint256',
                name: 'tokenId',
                type: 'uint256'
            }
        ],
        name: 'Approval',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'owner',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'operator',
                type: 'address'
            },
            {
                indexed: false,
                internalType: 'bool',
                name: 'approved',
                type: 'bool'
            }
        ],
        name: 'ApprovalForAll',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'from',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'to',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'uint256',
                name: 'tokenId',
                type: 'uint256'
            }
        ],
        name: 'Transfer',
        type: 'event'
    },
    {
        inputs: [
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' }
        ],
        name: 'approve',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
        name: 'getApproved',
        outputs: [{ internalType: 'address', name: '', type: 'address' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'owner', type: 'address' },
            { internalType: 'address', name: 'operator', type: 'address' }
        ],
        name: 'isApprovedForAll',
        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'name',
        outputs: [{ internalType: 'string', name: '', type: 'string' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
        name: 'ownerOf',
        outputs: [{ internalType: 'address', name: '', type: 'address' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'from', type: 'address' },
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' }
        ],
        name: 'safeTransferFrom',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'from', type: 'address' },
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' },
            { internalType: 'bytes', name: 'data', type: 'bytes' }
        ],
        name: 'safeTransferFrom',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'operator', type: 'address' },
            { internalType: 'bool', name: 'approved', type: 'bool' }
        ],
        name: 'setApprovalForAll',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }
        ],
        name: 'supportsInterface',
        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'symbol',
        outputs: [{ internalType: 'string', name: '', type: 'string' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],
        name: 'tokenURI',
        outputs: [{ internalType: 'string', name: '', type: 'string' }],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            { internalType: 'address', name: 'from', type: 'address' },
            { internalType: 'address', name: 'to', type: 'address' },
            { internalType: 'uint256', name: 'tokenId', type: 'uint256' }
        ],
        name: 'transferFrom',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    }
];

/**
 * Represents a test case for a smart contract function.
 * This interface is designed to capture the necessary details to execute and validate
 * a function call within a testing framework.
 */
interface TestCase {
    /**
     * A description of the test case. This is used to provide context for the test.
     */
    description: string;

    /**
     * The name of the function to be tested. This should match exactly with the function name
     * in the smart contract.
     */
    functionName: string;

    /**
     * An array of parameters to be passed to the function. The order and types of these parameters
     * should match the expected input of the smart contract function.
     */
    params: unknown[];

    /**
     * The expected result of the function call. This can vary in type depending on what
     * the function returns. It's used to assert whether the function behaves as expected.
     */
    expected: unknown;

    /**
     * Indicates whether the function call is expected to revert or throw an error.
     * A value of 'true' means the test is expecting the function to fail.
     */
    reverted: boolean;
}

const ExampleEnum = {
    SMALL: 0,
    MEDIUM: 1,
    LARGE: 2
};

const erc721ContractTestCases: TestCase[] = [
    {
        description:
            'should get the current NFT balance of the specific address',
        functionName: 'balanceOf',
        params: [TEST_ACCOUNTS.TRANSACTION.CONTRACT_MANAGER.address],
        expected: [0n],
        reverted: false
    }
];

const testingContractTestCases: TestCase[] = [
    {
        description: 'should return the bool value false',
        functionName: 'boolData',
        params: [false],
        expected: [false],
        reverted: false
    },
    {
        description: 'should return the bool value true',
        functionName: 'boolData',
        params: [true],
        expected: [true],
        reverted: false
    },
    {
        description: 'should return the bool value false when passed undefined',
        functionName: 'boolData',
        params: [undefined],
        expected: [false],
        reverted: false
    },
    {
        description: 'should return the int value 1',
        functionName: 'intData',
        params: [1],
        expected: [1n],
        reverted: false
    },
    {
        description: 'should return the int value -1',
        functionName: 'intData',
        params: [-1],
        expected: [-1n],
        reverted: false
    },
    {
        description: 'should return the int value 0',
        functionName: 'intData',
        params: [0],
        expected: [0n],
        reverted: false
    },
    {
        description: 'should return the uint value 0',
        functionName: 'uintData',
        params: [0],
        expected: [0n],
        reverted: false
    },
    {
        description: 'should return the uint value 1',
        functionName: 'uintData',
        params: [1],
        expected: [1n],
        reverted: false
    },
    {
        description:
            'should return the address value 0x0000000000000000000000000000000000000000',
        functionName: 'addressData',
        params: ['0x0000000000000000000000000000000000000000'],
        expected: ['0x0000000000000000000000000000000000000000'],
        reverted: false
    },
    {
        description:
            'should return the bytes32 value 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0',
        functionName: 'bytes32Data',
        params: [
            '0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0'
        ],
        expected: [
            '0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0'
        ],
        reverted: false
    },
    {
        description: 'should return the string value "a"',
        functionName: 'stringData',
        params: ['a'],
        expected: ['a'],
        reverted: false
    },
    {
        description: 'should return the passed fixed array',
        functionName: 'fixedArrayData',
        params: [[123, 456, 789]],
        expected: [[123n, 456n, 789n]],
        reverted: false
    },
    {
        description: 'should return the passed dynamic array',
        functionName: 'dynamicArrayData',
        params: [[123, 456, 789, 323, 123]],
        expected: [[123n, 456n, 789n, 323n, 123n]],
        reverted: false
    },
    {
        description: 'should return the passed struct',
        functionName: 'structData',
        params: [{ id: 10, name: 'test' }],
        expected: [[10n, 'test']],
        reverted: false
    },
    {
        description: 'should return the passed enum',
        functionName: 'enumData',
        params: [ExampleEnum.SMALL],
        expected: [BigInt(ExampleEnum.SMALL)],
        reverted: false
    },
    {
        description: 'should return the passed multiple values',
        functionName: 'multipleData',
        params: [
            1,
            '0x0000000000000000000000000000000000000000',
            '0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0',
            'a',
            [123, 456, 789],
            [123, 456, 789, 323, 123],
            { id: 10, name: 'test' },
            ExampleEnum.SMALL
        ],
        expected: [
            1n,
            '0x0000000000000000000000000000000000000000',
            '0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0',
            'a',
            [123n, 456n, 789n],
            [123n, 456n, 789n, 323n, 123n],
            [10n, 'test'],
            BigInt(ExampleEnum.SMALL)
        ],
        reverted: false
    },
    {
        description: 'should return the passed multiple int values',
        functionName: 'multipleIntData',
        params: [1, 222, 333, 287274, 390343843, 123223663],
        expected: [1n, 222n, 333n, 287274n, 390343843n, 123223663n],
        reverted: false
    }
];

export {
    contractBytecode,
    erc20ContractBytecode,
    erc721ContractBytecode,
    erc721ContractTestCases,
    deployedContractBytecode,
    deployedContractAbi,
    deployedERC20Abi,
    deployedERC721ContractAbi,
    testingContractTestCases
};
